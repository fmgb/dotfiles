
#+TITLE: Emacs Configuration
#+AUTHOR: fmgb
#+EMAIL: fmgb92@gmail.com
#+OPTIONS: toc:3 num:nul ^:nil
#+STARTUP: indent
#+STARTUP: content

* Configuración Emacs
#+BEGIN_SRC emacs-lisp
  (defvar t-start (current-time))
#+END_SRC
** Instrucciones de Inicio
*** Información Personal
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "fmgb"
        user-mail-address "fmgb92@gmail.com")

#+END_SRC
Se carga a partir del archivo "~/.emacs.d/init.el"
*** TODO Control inicio Emacs
#+BEGIN_SRC emacs-lisp
  


#+END_SRC
*** Fuentes de paquetes para Emacs
  #+BEGIN_SRC emacs-lisp
    (require 'package)
    (package-initialize)
    (setf package-archives (list '("gnu" . "http://elpa.gnu.org/packages/")
                                 '("marmalade" . "http://marmalade-repo.org/packages/")
                                 '("melpa" . "http://melpa.milkbox.net/packages/")
                                 '("org" . "http://orgmode.org/elpa/")
                                 '("elpy" . "http://jorgenschaefer.github.io/packages/")))      
  #+END_SRC

*** TODO Instalador de paquetes necesarios para Emacs
#+BEGIN_SRC emacs-lisp
  ;;; package --- Summary
  ;;; Commentary:


  ;;Inicializamos los buscadores de paquetes.
  ;;; Code:
  (package-initialize)

    (when (not package-archive-contents)
      (package-refresh-contents))


    ;;Definimos los paquetes necesarios y que queramos incluir.(Orden alfabético)
  (defvar my-packages '(2048-game
                        ace-window ack anaconda-mode arduino-mode  auto-complete auto-complete-auctex autopair
                        benchmark-init
                        checkbox cmake-mode cmake-project company company-auctex company-c-headers company-cmake company-irony 
                        elfeed elpy expand-region eyebrowse
                        diminish dired+ discover-my-major
                        flycheck flycheck-color-mode-line fuzzy 
                        git-commit git-timemachine
                        hideshowvis helm helm-descbinds helm-swoop highlight-blocks highlight-escape-sequences highlight-indentation highlight-numbers
                        imenu+ irony
                        jabber
                        latex-pretty-symbols
                        magit markdown-mode mediawiki multiple-cursors
                        notify
                        org org-ac org-page
                        plantuml-mode
                        pkg-info powerline pretty-mode pretty-mode-plus
                        rainbow-delimiters
                        screenshot smart-mode-line-powerline-theme scad-mode smex
                        w3m 
                        yasnippet)
      "A list of packages to ensure are installed at launch.")

    ;;Recorremos cada paquete y si no está instalado lo instalamos automáticamente.
    (dolist (p my-packages)
      (when (not (package-installed-p p))
            (package-install p)
          )
     )
    ;;; ends Code

    ;;; ends here
#+END_SRC

*** Paquetes necesarios para el inicio adecuado de emacs.
#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (require 'helm)
  (require 'helm-config)
  (require 'helm-files)
  (require 'helm-grep)
  (require 'helm-buffers)
  (require 'helm-org)
  (require 'helm-descbinds)
  (require 'htmlize)
  (require 'company)
  (require 'erc)
  ;;(require 'hlinum)
  ;;(require 'fixmee)
  (require 'expand-region)
  ;;(require 'web-mode)
  (require 'epa-file)
  ;;(require 'visual-regexp)
  ;;(require 'visual-regexp-steroids)
  ;;(when (file-exists-p "/usr/share/emacs/site-lisp/go-mode.el")
  ;;(require 'go-mode-load))
  (require 'latex-pretty-symbols)
  ;;(require 'company-go)
  (require 'org)
  (require 'org-page)
  ;;(require 'undo-tree)
  (require 'dired+)
  ;;(require 'muse-mode)
  ;;(require 'muse-project)
  ;;(require 'muse-docbook)
  ;;(require 'muse-book)
  (require 'eyebrowse)
  ;;(require 'mediawiki)
  (require 'rainbow-delimiters)
  ;;
  (load "flymake")
#+END_SRC
*** BackUp/autoSave directory to /tmp/
Backup in directory /tmp/
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . , temporary-file-directory)))
  (setq auto-save-file-name-transforms
         `((".*" , temporary-file-directory t)))
   
   ;;; ends here
#+END_SRC

*** Time-stamps
#+BEGIN_SRC emacs-lisp
  ;; when there's "Time-stamp: <>" in the first 10 lines of the file
  (setq time-stamp-active t
  ;; check first 10 buffer lines for Time-stamp: <>
  time-stamp-line-limit 5
  time-stamp-format "%04y-%02m-%02d %02H:%02M:%02S (%u)") ; date format
  (add-hook 'write-file-hooks 'time-stamp) ; update when saving

#+END_SRC
*** Aspecto Emacs
#+BEGIN_SRC emacs-lisp
    (powerline-center-theme)
    ;; Elimina elementos de la interfaz. descomentelo cuando se sienta bien hacker
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (tooltip-mode -1)
    (recentf-mode 1)
    (savehist-mode 1)
    (blink-cursor-mode -1)
    ;; Establece la tipografia que Emacs debe usar. La tipografia debe estar
    ;; instala en su sistema. Yo uso Source Code Pro porque es una tipografia muy
    ;; buena para programación.
    (set-frame-font "SourceCodePro 11")
    (add-to-list (quote default-frame-alist) (quote (font . "SourceCodePro-11")))
    (fset 'yes-or-no-p 'y-or-n-p)
    (global-auto-revert-mode 1)
    (column-number-mode 1)
    (global-subword-mode 1)
    (show-paren-mode t)
    (delete-selection-mode 1)
  ;;(line-number-mode t)
  ;;(set-face-attribute 'default nil :height 140)

      (setf
       bookmark-default-file (expand-file-name "bookmarks" user-emacs-directory)
       bookmark-save-flag 1
       inhibit-startup-message t
       initial-scratch-message nil
       line-spacing 1
       make-backup-files nil
       global-auto-revert-non-file-buffers t
       auto-revert-verbose nil
       echo-keystrokes 0.1
       shift-select-mode nil
       byte-compile-warnings '(not nresolved
                                 free-vars
                                 callargs
                                 redefine
                                 obsolete
                                 noruntime
                                 cl-functions
                                 interactive-only)
       fill-column 80
       blink-matching-paren nil
       uniquify-buffer-name-style (quote forward)
       recentf-max-saved-items 100
       history-length 1000
       x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)
       enable-recursive-minibuffers t
       gc-cons-percentage 0.125
       ediff-diff-options "-w"
       ediff-split-window-function 'split-window-horizontally
       ediff-window-setup-function 'ediff-setup-windows-plain
       custom-file (expand-file-name "custom.el" user-emacs-directory)
       flyspell-issue-message-flag nil
       )
      ;; Tabulacion
      (set-default 'indent-tabs-mode nil)

      (set-default 'indicate-empty-lines t)
      (setq-default truncate-lines t)

      (prefer-coding-system 'utf-8)
      (set-default-coding-systems 'utf-8)
      (set-terminal-coding-system 'utf-8)
      (set-keyboard-coding-system 'utf-8)

      (if
          (boundp 'buffer-file-coding-system)
          (setq-default buffer-file-coding-system 'utf-8)
        (setf default-buffer-file-coding-system 'utf-8))

     ;;(eval-after-load "yasnippet" '(diminish 'yas/minor-mode))
      (eval-after-load "button-lock" '(diminish 'button-lock-mode))
      (eval-after-load "org-indent" '(diminish 'org-indent-mode))
      (eval-after-load "helm-mode" '(diminish 'helm-mode))
      (eval-after-load "fixmee" '(diminish 'fixmee-mode))
      (eval-after-load "elpy" '(diminish 'elpy-mode))
      (eval-after-load "highlight-indentation" '(diminish 'highlight-indentation-mode))
      (eval-after-load "autopair" '(diminish 'autopair-mode))
      (eval-after-load "flycheck" '(diminish 'flycheck-mode))
      (eval-after-load "flyspell" '(diminish 'flyspell-mode))
      (eval-after-load "simple" '(diminish 'auto-fill-function))
      (eval-after-load "company" '(diminish 'company-mode))
  ;;    (eval-after-load "magit" '(diminish 'magit-auto-revert-mode))
      (eval-after-load "eyebrowse" '(diminish 'eyebrowse-mode))
      (eval-after-load "subword-mode" '(diminish 'subword-mode))
      (eval-after-load "visual-line-mode" '(diminish 'visual-line-mode))
      (load custom-file)
#+END_SRC
*** After-init-hook
Después de que cargue la configuración por completo, se activan los modos.
#+BEGIN_SRC emacs-lisp
    (add-hook 'after-init-hook (lambda ()
                                 (helm-mode 1)
                                 (helm-descbinds-mode)
                                 (global-flycheck-mode)
                                 (autopair-global-mode)
                                 (global-pretty-mode t)
                                 (global-company-mode)
                                 (projectile-global-mode)
  ;;                               (global-fixmee-mode 1)
                                ;; (helm-projectile-on)
                                 (eyebrowse-mode t)
                                 (multiple-cursors-mode t)
                                 (emacs-init-time)
(linum-mode 1)
                                 )
              )
#+END_SRC

** Configuración modos Mayores y combinaciones teclas globales
Configuración respectiva a los modos mayores y combinación de las teclas globales.
*** Modo mayor programación
#+BEGIN_SRC emacs-lisp
  (autoload 'hideshowvis-enable "hideshowvis" "Highlight foldable regions")

  (add-hook 'prog-mode-hook (lambda ()
                              ;; Estas variables seran locales al buffer donde el
                              ;; gancho sea activado.
                              (set (make-local-variable 'fill-column) 79)
                              ;; Esta variable local le indica a Emacs que los
                              ;; comentarios que hagamos pongamos en nuestro
                              ;; codigo fuente de cualquier modo mayor de
                              ;; programación se rompa al llegar a la columna
                              ;; 79. Basicamente tu solo te preocupas de escribir
                              ;; el comentario y Emacs te lo acomodara para que
                              ;; quede bonito ;)
                              (set (make-local-variable 'comment-auto-fill-only-comments) t)
                              (auto-fill-mode t)
                              (toggle-truncate-lines)
                              (highlight-numbers-mode)
                              (hes-mode)
                              (highlight-blocks-mode)
                              (hlinum-activate)
                              (hlinum-highlight-current-line)
                              (hs-minor-mode)
                              (global-company-mode)
                              ;;(electric-pair-mode)
                              (flyspell-prog-mode)
                              (rainbow-delimiters-mode)
                              (hideshowvis-enable)
                              ;;(define-key commentline (kbd "C-c ;") 'comment-region)
  ))

  ;; redefinimos la tecla RET para que se comporte de otra manera en los modos de
  ;; programación.
  (define-key prog-mode-map (kbd "RET") 'newline-and-indent)

#+END_SRC

*** Modo mayor texto
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook (lambda ()
                              ;; la columna límite para los modos que llamen al
                              ;; gancho text-mode-hook pueden ser un poco más
                              ;; largos. 79 es poco.
                              (set (make-local-variable 'fill-column) 110)
                              (turn-on-visual-line-mode)
                              (auto-fill-mode)
                              ;; tienes que tener instalado ispell instalado en
                              ;; tu sistema sino éste modo menor te causara
                              ;; problemas, comentaló y reinicia emacs si es así
                              (flyspell-mode)
                              ;; flyspell lo que hace es revisar tu
                              ;; ortografia. Lo puedes activar también para que
                              ;; revise la ortografia de cadenas y comentarios en
                              ;; los modos mayores para programación con
                              ;; (flyspell-prog-mode) en el gancho prog-mode-hook
  ))

#+END_SRC

*** Teclas Globales
#+BEGIN_SRC emacs-lisp

    ;; establecemos combinaciones de teclas a nivel global para accesar a algunos
    ;; comandos extendidos desde el teclado. Si alguna combinacion no es de tu
    ;; agrado, cambiala. Asegurate de que la combinacion de teclas que deseas usar
    ;; no este ya ocupada, eso lo puedes comprobar presionando la combinación de
    ;; teclas, si en el area de eco aparece la combinación seguido de `is
    ;; undefined` entonces la puedes usar.

    ;; el comando undo hace lo mismo que en cualquier programa hace CTRL+z yo he
    ;; escojido la combinacion C-ç debido a que uso emacs mayor mente en una
    ;; portatil, y ademas que la combinación C-z ya esta ocupada.
    (global-set-key (kbd "C-ç") 'undo)

    ;; Mover el cursor entre ventanas es mas facil si haces M-o en lugar de C-x o.
    (global-set-key (kbd "M-o") 'other-window)

    ;; La siguiente combinacion sirve para dividir una ventana a la mitad, ya sea
    ;; horizontal o verticalmente, sin embargo acá le hacemos un hackeo para que
    ;; ademas de dividir la ventana, mueva el cursor a la ventana recien creada
    (global-set-key (kbd "C-x 2") (lambda ()
                                    (interactive)
                                    (split-window-vertically)
                                    (other-window 1)))

    (global-set-key (kbd "C-x 3") (lambda ()
                                    (interactive)
                                    (split-window-horizontally)
                                    (other-window 1)))

    ;; Al usar la siguiente combinación de teclas, un buffer listando las
    ;; combinaciones de teclas disponibles se abrira. Util si has olvidado alguna
    ;; combinación en particular
    (global-set-key (kbd "C-h C-m") 'discover-my-major)

    ;; Ace-window nos permite cambiar al buffer que queramos en pantalla tecleándo
    ;; el número al que queremos ir.
    (global-set-key (kbd "M-p") 'ace-window)
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))

    ;; Configuracion SMex, sirve para buscar funciones cuando pulsamos M-x.
    ;; Fuente: http://www.emacswiki.org/emacs/Smex
    (global-set-key [(meta x)] (lambda ()
                                 (interactive)
                                 (or (boundp 'smex-cache)
                                    (smex-initialize))
                                 (global-set-key [(meta x)] 'smex)
                                 (smex)))

    (global-set-key [(shift meta x)] (lambda ()
                                       (interactive)
                                       (or (boundp 'smex-cache)
                                          (smex-initialize))
                                       (global-set-key [(shift meta x)] 'smex-major-mode-commands)
                                       (smex-major-mode-commands)))

    (defun smex-update-after-load (unused)
      (when (boundp 'smkex-cache)
        (smex-update)))

    (add-hook 'after-load-functions 'smex-update-after-load)
    ;;Desactivamos el C-z porque me da rabia cuando sin querer le doy.
    (global-unset-key (kbd "C-z"))

    ;;Función para abrir el fichero de configuración
    (defun open-configuration ()
      "Show the emacs configuration"
      (interactive)
      (find-file "~/.emacs.d/configuration.org"))

    ;; Mostrar/Ocultar el menu de emacs
    (global-set-key (kbd "<f12>") 'menu-bar-mode)

    ;; 
    (global-set-key (kbd "C-c l") 'org-store-link)
    ;; Show agenda
    (global-set-key (kbd "C-c a") 'org-agenda)
    ;; Use templates
    (global-set-key (kbd "C-c c") 'org-capture)

    ;;Magit
    (global-set-key (kbd "C-x g") 'magit-status)

    ;;Jabber-chat
    (global-set-key [escape] 'jabber-chat-with)
  ;; elfeed
  (global-set-key (kbd "C-x w") 'elfeed)

  ;; My-kill-buffer
  ;;(global-set-key (kbd "C-K") 'my-kill-buffer)

  ;;Mostrar a la izquierda del buffer una columna con los número de línea.
  (global-set-key (kbd "<f9>") 'linum-mode)
#+END_SRC
** Configuración de modos Menores
*** Ace-jump
Movimiento del cursor por todo el buffer con presionar pocas teclas
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-z") 'ace-jump-word-mode)
  (global-set-key (kbd "C-S-z") 'ace-jump-line-mode)
  (global-set-key (kbd "C-M-z") 'ace-jump-char-mode)
  (global-set-key (kbd "M-z") 'ace-jump-mode-pop-mark)
  (setf ace-jump-mode-case-fold t)
#+END_SRC

*** Arduino-mode
#+BEGIN_SRC emacs-lisp

  (defun my-irony-mode-hook ()
    (define-key irony-mode-map [remap completion-at-point]
      'irony-completion-at-point-async)
    (define-key irony-mode-map [remap complete-symbol]
      'irony-completion-at-point-async))

  (add-hook 'arduino-mode-hook
            (lambda ()
              (c-mode)
              (irony-mode)
              (set (make-local-variable 'company-backends) '(company-c-headers 
                                                             company-irony
                                                             company-yasnippet
                                                             ))
              ))

  (add-hook 'irony-mode-hook 
            (lambda ()
              (company-irony-setup-begin-commands)
              (my-irony-mode-hook)
              ))
 #+END_SRC
*** C-Mode
#+BEGIN_SRC emacs-lisp
    (setq c-auto-newline 1)
    ;;(global-set-key (kbd "C-tab") 'company-complete-common)  
  ;;   (add-hook 'c-mode-common-hook
    ;;             (lambda ()
    ;;               (modify-syntax-entry ?_ "w")
    ;;               (modify-syntax-entry ?\; "w")
    ;;               (modify-syntax-entry ?\) "w")
    ;;                             (local-set-key (kbd "M-u")
    ;;                              '(lambda ()
    ;;                                 (interactive)
    ;;                                 (backward-word 1)
    ;;                                 (upcase-word 1)))
    ;;               ))

#+END_SRC
*** TODO C++
Configuración para C++
#+BEGIN_SRC emacs-lisp
         (require 'cmake-project)
         
         (defun maybe-cmake-project-hook ()
           (if (file-exists-p "CMakeLists.txt") (cmake-project-mode)))
         
         (defun my-irony-mode-hook ()
           (define-key irony-mode-map [remap completion-at-point]
             'irony-completion-at-point-async)
           (define-key irony-mode-map [remap complete-symbol]
             'irony-completion-at-point-async))
         
         (add-hook 'c++-mode-hook
                   (lambda ()
                     (irony-mode)
                     (set (make-local-variable 'company-backends) '(company-c-headers 
                                                                    company-irony
                                                                    company-yasnippet
                                                                    ))
                     (maybe-cmake-project-hook)
         ))
         
         (add-hook 'irony-mode-hook 
                   (lambda ()
                     (company-irony-setup-begin-commands)
                     (my-irony-mode-hook)
         ))
#+END_SRC
*** CMake
#+BEGIN_SRC emacs-lisp
  (require 'cmake-mode)

  (setq auto-mode-alist
        (append
         '(("CMakeLists\\.txt\\'" . cmake-mode))
         '(("\\.cmake\\'" . cmake-mode))
         auto-mode-alist))

  (add-hook 'cmake-mode-hook 
            (lambda ()
              (set (make-local-variable 'company-backends) '(company-cmake
                                                             company-yasnippet))
              ))
#+END_SRC
*** Company
El paquete proporciona la función de autocompletado. 
#+BEGIN_SRC emacs-lisp
  (require 'color)
    
    (let ((bg (face-attribute 'default :background)))
      (custom-set-faces
       `(company-tooltip ((t (:inherit default :background ,(color-lighten-name bg 2)))))
       `(company-scrollbar-bg ((t (:background ,(color-lighten-name bg 10)))))
       `(company-scrollbar-fg ((t (:background ,(color-lighten-name bg 5)))))
       `(company-tooltip-selection ((t (:inherit font-lock-function-name-face))))
       `(company-tooltip-common ((t (:inherit font-lock-constant-face))))))

  (setf company-idle-delay 0.3
        company-tooltip-limit 20
        company-minimum-prefix-length 2
        company-echo-delay 0
        company-auto-complete nil)

  (add-to-list 'company-backends 'company-dabbrev t)
  (add-to-list 'company-backends 'company-ispell t)
  (add-to-list 'company-backends 'company-files t)
  (add-to-list 'company-backends 'company-yasnippet t)
#+END_SRC
*** Dired y dired+
Extiende funcionalidades de dired.
   #+BEGIN_SRC emacs-lisp
       (defun dired-quit-window-kill-buffer ()
         "Además de matar el buffer, cierra la ventana"
         (interactive)
         (let ((win-curr (selected-window))
               (win-other (next-window)))
           (select-window win-other)
           (kill-this-buffer)
           (select-window win-curr)))

       (setf dired-dwim-target t)
       (define-key ctl-x-map   "d" 'dired)
       (define-key ctl-x-4-map "d" 'diredp-dired-for-files-other-window)
       (define-key dired-mode-map (kbd ".") 'dired-up-directory)
       (define-key dired-mode-map (kbd "q") 'dired-quit-window-kill-buffer)
     #+END_SRC

*** Discover-my-major
Éste paquete nos muestra las combinaciones de teclas posibles para el modo mayor en el que estamos
actualmente, todo lo que hay que hacer es recordar una combinación especifica de teclas.

Esta combinación por defecto es C-h C-m ;)

      #+BEGIN_SRC emacs-lisp
        (global-set-key (kbd "C-h C-m") 'discover-my-major)
      #+END_SRC
*** EasyPG
#+BEGIN_SRC emacs-lisp
  (require 'epa-file)

  (epa-file-enable)

#+END_SRC
*** Elfeed
#+BEGIN_SRC emacs-lisp
  

  ;;Sites-RSS
  (setq elfeed-feeds
        '("http://nullprogram.com/feed/"
          "http://www.terminally-incoherent.com/blog/feed"
          "http://emacs-fu.blogspot.com/feeds/posts/default"
          "http://sachachua.com/blog/feed/"))

#+END_SRC
*** ERC
#+BEGIN_SRC emacs-lisp

  ;; joining && autojoing

  ;; make sure to use wildcards for e.g. freenode as the actual server
  ;; name can be be a bit different, which would screw up autoconnect
  (erc-autojoin-mode t)
  (setq erc-autojoin-channels-alist
    '((".*\\.freenode.net" "#emacs" "#plmaster")
       (".*\\.gimp.org" "#unix" "#gtk+")))
#+END_SRC
*** Expand-region
Provee una manera fácil de hacer selección de elementos en el buffer con presionar solo una tecla. Puede ver
éste paquete en acción en este episodio de [[http://emacsrocks.com/e09.html][Emacs Rocks]].

     #+BEGIN_SRC emacs-lisp
       (global-set-key (kbd "C-'") 'er/expand-region)
     #+END_SRC
*** Flycheck-mode
revisión-al-vuelo de la sintaxis mientras editas código. Hace una selección automática del mejor revisor de sintaxis que dispongas.
Tiene soporte para muchos lenguajes. Lo recomiendo por encima de flymake.

#+BEGIN_SRC emacs-lisp
  (setf
   flycheck-disabled-checkers '(emacs-lisp-checkdoc) ;; deshabilita el majadero revisor de documentación
   flycheck-indication-mode 'right-fringe
   )
#+END_SRC

*** Gcode
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/plugins/gcode-mode")
  (load "gcode.el")
  (require 'gcode)

#+END_SRC
*** HELM
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))
  (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to do persistent action
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
  (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
  (global-set-key (kbd "C-x f") 'helm-recentf)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "C-c i") 'helm-imenu)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-x b") 'helm-mini)
  (global-set-key (kbd "C-c h o") 'helm-occur)
  (global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)
  (global-set-key (kbd "C-c h x") 'helm-register)
  (global-set-key (kbd "C-c h g") 'helm-google-suggest)
  (define-key minibuffer-local-map (kbd "C-c C-l") 'helm-minibuffer-history)
  (define-key shell-mode-map (kbd "C-c C-l") 'helm-comint-input-ring)
  (define-key helm-grep-mode-map (kbd "<return>")  'helm-grep-mode-jump-other-window)
  (define-key helm-grep-mode-map (kbd "n")  'helm-grep-mode-jump-other-window-forward)
  (define-key helm-grep-mode-map (kbd "p")  'helm-grep-mode-jump-other-window-backward)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(when (executable-find "curl")
    (setf helm-google-suggest-use-curl-p t))

  (setf
   helm-split-window-in-side-p t          ; open helm buffer inside current window, not
                                          ; occupy whole other window
   helm-move-to-line-cycle-in-source t    ; move to end or beginning of source when
                                          ; reaching top or bottom of source.
   helm-ff-search-library-in-sexp t       ; search for library in `require' and
                                          ; `declare-function' sexp.
   helm-scroll-amount 8                   ; scroll 8 lines other window using M-<next>/M-<prior>
   helm-ff-file-name-history-use-recentf t
   helm-locate-command "locate %s -e -A --regex %s"
   helm-locate-fuzzy-match t
   helm-M-x-fuzzy-match t
   helm-buffers-fuzzy-matching t
   helm-recentf-fuzzy-match    t
   helm-boring-buffer-regexp-list '("\\` "
                                    "\\*helm"
                                    "\\*helm-mode"
                                    "\\*Echo Area"
                                    "\\*Minibuf"
                                    "\\*monky-cmd-process\\*"
                                    "\\*epc con"
                                    "\\*Compile-Log\\*"
                                    "\\*monky-process\\*"
                                    "\\*CEDET CScope\\*"
                                    "\\*Messages\\*"
                                    "\\*Flycheck error"
                                    "\\*Elpy"
                                    "\\*elpy-rpc"
                                    "\\*.+(.+)"
                                    "\\*fsm-debug\\*"
                                    "elpa/.+"
                                    "\\*Gofmt Errors\\*")
   
   helm-boring-file-regexp-list (quote
                                 ("\\.git$" "\\.hg$" "\\.svn$" "\\.CVS$"
                                  "\\._darcs$" "\\.la$" "\\.o$" "~$"
                                  "\\.pyc$" "\\.elc$" "TAGS" "\#*\#"
                                  "\\.exe$" "\\.jar$" "\\.img$" "\\.iso$"
                                  "\\.xlsx$" "\\.epub$" "\\.docx$"))
   helm-ff-skip-boring-buffers t
   helm-truncate-lines t
   helm-projectile-sources-list '(helm-source-projectile-files-list))

  ;; Instalar ack o ack-grep
  ;; Permite realizar busquedas.
  (when (executable-find "ack")
    (setq helm-grep-default-command "ack -Hn --no-group --no-color %e %p %f"
          helm-grep-default-recurse-command "ack -H --no-group --no-color %e %p %f"))

  ;; en caso de que ack-grep sea el programa disponible
  (when (executable-find "ack-grep")
    (setq helm-grep-default-command "ack-grep -Hn --no-group --no-color %e %p %f"
          helm-grep-default-recurse-command "ack-grep -H --no-group --no-color %e %p %f"))
  (add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)
  (add-hook 'helm-goto-line-before-hook 'helm-save-current-pos-to-mark-ring)

#+END_SRC
#  LocalWords:  activate mode TITLE Configuration
*** HideShow
#+BEGIN_SRC emacs-lisp
  (defvar hs-especial-modes-alist
    (mapcar 'purecopy
            '((c-mode "{" "}" "/[*/]" nil nil)
              (c++-mode "{" "}" "/[*/]" nil nil)
              (bibtex-mode ("@\\S(*\\(\\s(\\)" 1))
              (java-mode "{" "}" "/[*/]" nil nil)
              (js-mode "{" "}" "/[*/]" nil))))

#+END_SRC
*** Iedit
=iedit-mode= es un modo que permite editar un termino repetido en varios lugares a la vez en el 
buffer actual, es como =multiple-cursors=, pero sin la tener que marcar un area y luego llamar 
al modo mayor.
Cuando =iedit-mode= esta activo, presionar la tecla RET hará que se desactive, al igual que 
sucede con =multiple-cursors=.
#+BEGIN_SRC emacs-lisp
 ;; (define-key iedit-mode-keymap (kbd "RET") 'iedit-mode)
#+END_SRC

*** Jabber
Chat de jabber en emacs.
#+BEGIN_SRC emacs-lisp
        (setf
         jabber-history-enabled t
         jabber-use-global-history nil
         jabber-backlog-number 40
         jabber-backlog-days 30
         jabber-alert-presence-message-function (lambda (who oldstatus newstatus statusnext) nil)
      ;;   jabber-invalid-certificate-servers '("chat.deshackra.com")
         jabber-default-status "«Faith is always at a disadvantage; it is a perpetually defeated thing which survives all of its conquerors,» wrote G. K. Chesterton."
         )

      (defun notify-jabber-notify (from buf text proposed-alert)
          "Notifica sobre los nuevos mensajes en Jabber via notify.el"
          (when (or jabber-message-alert-same-buffer
                   (not (memq (selected-window)(get-buffer-window-list buf))))
            (if (jabber-muc-sender-p from)
                (notify (format "(MP) %s"
                                (jabber-jid-displayname (jabber-jid-user from)))
                        (format "%s: %s"(jabber-jid-resource from) text)))
            (notify (format "%s" (jabber-jid-displayname from))
                    text)))

        (defun my-jabber-chat-delete-or-bury ()
          (interactive)
          (if (eq 'jabber-chat-mode major-mode)
              (condition-case e
                  (delete-frame)
                (error
                 (if (string= "Attempt to delete the sole visible or iconified frame"
                              (cadr e))
                     (bury-buffer))))))

  ;;     (if (daemonp)
            ;;Para conectarnos a todas las cuentas jabber!
            ;; (progn
            ;;   (ignore-errors
            ;;     (load-file (expand-file-name "secrets.txt.gpg" user-emacs-directory)))
            ;;   (ignore-errors
  ;;              (jabber-connect-all)))

      ;; Mostrar alertas cuando llegan mensajes.
    ;;  (setq jabber-xosd-display-time 5)

      (defun jabber-xosd-display-message (message)
        "Displays MESSAGE through the xosd"
        (let ((process-connection-type nil))
          (start-process "jabber-xosd" nil "osd_cat" "-p" "bottom" "-A" "center" "-f" "-*-courier-*-*-*-*-30" "-d" (number-to-string jabber-xosd-display-time))
          (process-send-string "jabber-xosd" message)
          (process-send-eof "jabber-xosd")))

      (defun jabber-message-xosd (from buffer text propsed-alert)
        (jabber-xosd-display-message "New message."))


      ;;Anyadimos elementos al modo de jabber.

      (add-hook 'jaber-chat-mode-hook (lambda ()
                                        (turn-off-auto-fill)
                                        (turn-on-visual-line-mode)
                                        (flyspell-mode)
                                        (goto-adress)
                                        (jabber-alert-message-hooks)
                                        (jabber-message-xmessage)
                                        (jabber-alert-message-xosd)
                                        (jabber-message-beep)
                                          ))


      ;;Evitamos las notificaciones de cambios de estado

      ;;  (define-key jabber-chat-mode-hook-map (kbd "RET") 'newline)
        ;;(define-key jabber-chat-mode--hook-map [C-return] 'jabber-chat-buffer-send)

#+END_SRC
*** Java
#+BEGIN_SRC emacs-lisp
;;TODO

#+END_SRC
*** LaTeX
#+BEGIN_SRC emacs-lisp
  ;;(add-to-list 'load-path "~/.emacs.d/plugins/predictive")
  ;;  (require 'predictive)
  ;;   (require 'auto-complete-auctex)
  ;;  (require 'company-auctex)
  (company-auctex-init)
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (add-hook 'reftex-load-hook 'imenu-add-menubar-index)
  ;;  (add-hook 'reftex-load-hook 'hs-minor-mode)
  (add-hook 'reftex-mode-hook 'imenu-add-menubar-index)
  ;;(add-hook 'reftex-mode-hook 'hs-minor-mode)
  ;; (add-hook 'LaTeX-mode-hook 'predictive-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (add-hook 'LaTeX-mode-hook (lambda()
                               (TeX-fold-mode 1)))
  (setq reftex-plug-into-AUCTeX t)

  ;; Default Compiler PDFLaTeX 
  (setq TeX-PDF-mode t)
#+END_SRC
*** Magit
#+BEGIN_SRC emacs-lisp
  (eval-after-load 'magit
    (progn
      (setq magit-status-buffer-switch-function 'switch-to-buffer)
      (add-hook 'magit-log-edit-mode-hook (lambda () (set-fill-column 72)))))
#+END_SRC
*** MediaWiki
Acceso para Emacs a sitios que usan Wikimedia
#+BEGIN_SRC emacs-lisp
  (if (daemonp)
      (ignore-errors
        (load-file (expand-file-name "mediawiki.secret.gpg" user-emacs-directory))))
;;  (define-key mediawiki-mode-map (kbd "C-c o") 'mediawiki-browse)
#+END_SRC

*** TODO mu4e 
Para el correo electrónico. INVESTIGAR
*** Multiple-Cursors
Marca varias partes del buffer o buffers. Este paquete puedes tener configuraciones de teclas muy variadas, lo mejor es que visites la pagina del
proyecto en Github para más [[https://github.com/magnars/multiple-cursors.el#basic-usage][información]]. Las teclas usadas reflejan la reducida cantidad que existen en mi
laptop.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-+") 'mc/mark-next-like-this)
(define-key global-map (kbd "M-+") 'mc/mark-previous-like-this)
(define-key global-map (kbd "C-M-+") 'mc/mark-all-like-this)
#+END_SRC
*** Notificaciones
Permite enviar notificaciones por dbus.
#+BEGIN_SRC emacs-lisp
(setf notify-method 'notify-via-libnotify)
#+END_SRC
*** Octave-mode
#+BEGIN_SRC emacs-lisp
  ;; (autoload 'octave-mode "octave-mod" nil t)
   (setq auto-mode-alist
         (cons '("\\.m$" . octave-mode) auto-mode-alist))

   (add-hook 'octave-mode-hook
             (lambda ()
               (company-complete)
               (abbrev-mode 1)
               (auto-fill-mode 1)
               ))

#+END_SRC
*** Org-mode
#+BEGIN_SRC emacs-lisp
   (setf    org-footnote-auto-adjust t
            org-habit-graph-column 55
            org-directory (expand-file-name "~/Dropbox/Org")
            org-archive-location (concat org-directory "/archivado.org::* Entradas viejas y archivadas")
            org-special-ctrl-k t
            org-ctrl-k-protect-subtree t ;; Evitamos perder todo el arbol
            org-catch-invisible-edits 'show
            org-return-follow-link t
            ;;org-blank-before-new-entry t
            org-startup-indented t
            org-startup-folded nil
            org-imenu-depth 5
            org-log-done 'time
            org-clock-persist 'history
            org-default-notes-file (concat org-directory "/notas.org")
            
            org-agenda-files (list (concat org-directory "/cosasporhacer.org")
                                   (concat org-directory "/agenda.org"))
            
            org-mobile-directory (concat org-directory "/mobile")
            
            ;; Conjunto de templates
            org-capture-templates `(("h" "Cosas por hacer" entry (file+headline ,(concat org-directory "/cosasporhacer.org") "Hacer")
                                     "* TODO %^{breve descripción}\n%?\nAgregado: %U\n En: %a" :clock-in nil :clock-keep nil :clock-resume nil)
                                    ("e" "Configurar emacs" entry (file+headline, (concat org-directory "/cosasporhacer.org") "Emacs")
                                     "* TODO %^{Breve descripción}\t%^G\n%?\nAgregado el: %U\n" :clock-in nil :clock-keep nil :clock-resume nil)
                                    ("m" "Proyecto mkIT" entry(file+regexp, (concat org-directory "/cosasporhacer.org") "mkIT")
                                     "* TODO %^{Breve descripción}\t%^G\n%?\nAgregado el: %U\n")
                                    ("u" "Universidad-PL" entry(file+regexp ,(concat org-directory "/cosasporhacer.org") "PL")
                                     "** TODO %^{breve descripción}\n%?\nAgregado el: %U \n" :clock-in nil :clock-keep nil :clock-resume nil :prepend t)
                                    ("t" "Universidad-TAR" entry(file+regexp ,(concat org-directory "/cosasporhacer.org") "TAR")
                                     "** TODO %^{breve descripción}\n%?\nAgregado el: %U \n" :clock-in nil :clock-keep nil :clock-resume nil :empty-lines 1)
                                    ("w" "TFG Week" entry(file+regexp, (concat org-directory "/cosasporhacer.org") "WeekTFG")
                                     "** TODO %^{Breve descripción}\n%?\n Agregado el: %U \n":clock-in nil :clock-keep nil :clock-resume nil)
                                    ("d" "TFG Doc" entry(file+regexp, (concat org-directory "/cosasporhacer.org") "DocTFG")
                                     "** TODO %^{Breve descripción}\n%?\n Agregado el: %U \n":clock-in nil :clock-keep nil :clock-resume nil)
                                    ("c" "Curso Coursera" entry(file+regexp, (concat org-directory "/cosasporhacer.org") "Coursera")
                                     "** TODO %^{Breve descripción}\n%?\n Agregado el: %U \n":clock-in nil :clock-keep nil :clock-resume nil)
                                    ("x" "Curso MiriadaX" entry(file+regexp, (concat org-directory "/cosasporhacer.org") "MiriadaX")
                                     "** TODO %^{Breve descripción}\n%?\n Agregado el: %U \n":clock-in nil :clock-keep nil :clock-resume nil)
                                    ("a" "Archlinux" entry(file+regexp, (concat org-directory "/cosasporhacer.org") "Archlinux")
                                     "* TODO %^{Breve descripción}\t%^G\n%?\nAgregado el: %U\n" :clock-in nil :clock-resume nil :clock-keep nil)
                                    )
            ;;org-capture-templates-contexts '()
            ;; Conjuntos de TODO
            org-todo-keywords
            '((sequence "TODO(t)" "PROGRESS(p)" "WAITING(w)" "|" "DONE(d)")
              (sequence "REPORT(r)" "BUG(b)" "KNOWNCASE(k)" "|" "FIXED(f)")
              (sequence "|" "CANCELLED(c)"))
            
            org-todo-keyword-faces '(
                                     ("TODO" . (:foreground "black" :background "#ff4500" :weight bold))
                                     ("PROGRESS" . (:foreground "black" :background "#ffa500" :weight bold))
                                     ("WAITING" . (:foreground "black" :background "#0000ff" :weight bold))
                                     ("DONE" . (:foreground "black" :background "#32cd32" :weight bold))
                                     ("REPORT" . (:foreground "black" :background "#ffff00" :weight bold))
                                     ("BUG" . (:foreground "black" :background "#f0f0f0" :weight bold))
                                     ("KNOWCASE" . (:foreground "black" :background "#ff00ff" :weight bold))
                                     ("FIXED" . (:foreground "black" :background "#00ffff" :weight bold))
                                     ("CANCELLED" . (:foreground "black" :background "#8b0000" :weight bold))
                                     )
            )
   ;;Abrir los links a pdf con evince
   (delete '("\\.pdf\\'" . default) org-file-apps)
   (add-to-list 'org-file-apps '("\\.pdf::\\([0-9]+\\)\\'" . "evince \"%s\"-p %1"))

   ;;Autocompletado org
  ;; (require 'org-ac)
   ;;(org-ac/config-default)

   ;;Exportar los checkbox del UTF-0 al HTML 
   (defun sacha/org-html-checkbox (checkbox)
     "Format CHECKBOX into HTML."
     (case checkbox (on "<span class=\"check\">&#x2611;</span>") ; checkbox (checked)
           (off "<span class=\"checkbox\">&#x2610;</span>")
           (trans "<code>[-]</code>")
           (t "")))
   (defadvice org-html-checkbox (around sacha activate)
     (setq ad-return-value (sacha/org-html-checkbox (ad-get-arg 0))))

   (defun org-todo-at-date (date)
     (interactive (list (org-time-string-to-time (org-read-date))))
     (flet ((org-current-effective-time (&rest r) date)
            (org-today (&rest r) (time-to-days date)))
       (org-todo)))

#+END_SRC
*** Projectile
Permite el manejo de proyectos. También es posible definir un proyecto en una carpeta dejando caer en él un archivo =.projectile=, dentro de este archivo se puede
definir qué archivos/carpetas ignorar y cuales no. Para más información ver la [[http://batsov.com/projectile/][pagina del proyecto]].
#+BEGIN_SRC emacs-lisp
(setf
        projectile-completion-system 'helm
        projectile-file-exists-remote-cache-expire (* 10 60)
        projectile-globally-ignored-files (quote ("TAGS" "\#*\#" "*~" "*.la"
                                            "*.o" "~" "*.pyc" "*.elc" "*.exe"
                                            "*.zip" "*.tar.*" "*.rar" "*.7z"))
        projectile-switch-project-action  'helm-projectile-find-file
        )
#+END_SRC
*** Rainbow-delimeters
#+BEGIN_SRC emacs-lisp
      (require 'rainbow-delimiters)
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
      (custom-set-faces
       ;; custom-set-faces was added by Custom.
       ;; If you edit it by hand, you could mess it up, so be careful.
       ;; Your init file should contain only one such instance.
       ;; If there is more than one, they won't work right.
       ;; '(rainbow-delimiters-depth-1-face ((t (:foreground "blue"))))
       ;; '(rainbow-delimiters-depth-2-face ((t (:foreground "yellow"))))
       ;; '(rainbow-delimiters-depth-3-face ((t (:foreground "white"))))
       ;; '(rainbow-delimiters-depth-4-face ((t (:foreground "green"))))
       ;; '(rainbow-delimiters-depth-5-face ((t (:foreground "purple"))))
       ;; '(rainbow-delimiters-depth-6-face ((t (:foreground "brown"))))
       ;; '(rainbow-delimiters-depth-7-face ((t (:foreground "magenta"))))
       ;; '(rainbow-delimiters-depth-8-face ((t (:foreground "#04FFFF"))))
       ;; '(rainbow-delimiters-depth-9-face ((t (:foreground "orange"))))
       ;;'(rainbow-delimiters-unmatched-face ((t (:foreground "red"))))
       '(show-paren-match ((((class color) (background light)) (:background "azure2")))))
  (provide 'rainbow-delimiters)
#+END_SRC
*** Smart mode-line
#+BEGIN_SRC emacs-lisp
  (sml/setup)
;;  (sml/apply-theme 'respectful)

  (add-to-list 'sml/replacer-regexp-list '("^~/coders/" ":Código:") t)
  (add-to-list 'sml/replacer-regexp-list '("^:Código:PPH/clientes/" ":PPH:") t)

#+END_SRC
*** Scad-mode
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/plugins/scad-mode")
  (load "scad-mode.el")
  (require 'scad)

#+END_SRC
*** Yasnippet
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path
               "~/.emacs.d/plugins/yasnippet")
  (require 'yasnippet)
  (yas-global-mode 1)
  (add-hook 'prog-mode-hook
            '(lambda ()(yas-minor-mode)))

#+END_SRC

#+BEGIN_SRC emacs-lisp
;;  (message "Emacs ready!")
;;  (message "Total elapsed: %s" (float-time (time-subtract (current-time) t-start)))

#+END_SRC

** Funciones cómodas
*** My-kill-buffer 
#+BEGIN_SRC emacs-lisp
  (defun my-kill-buffer ()
  "Kill current buffer without confirmation (unless modified)."
  (interactive)
  (kill-buffer (current-buffer)))

#+END_SRC
